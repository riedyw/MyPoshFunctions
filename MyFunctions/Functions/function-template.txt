Function Test-Port {
<#
.SYNOPSIS
    Short description
.DESCRIPTION
    Longer description
.PARAMETER ComputerName
    An array of ComputerName to test the port connection on.
.PARAMETER Port
    Port number to test ([int16] 0 - 65535)
.PARAMETER TCP
    Use TCP as the transport protocol
.PARAMETER UDP
    Use UDP as the transport protocol
.PARAMETER UDPTimeOut
    Sets a timeout for UDP port query. (In milliseconds, Default is 1000)
.PARAMETER TCPTimeOut
    Sets a timeout for TCP port query. (In milliseconds, Default is 1000)
.NOTES
    Author:     Bill Riedy
    Version:    1.0
    Date:       2018/03/13
    To Do:      UDP port testing not currently working
.EXAMPLE
    Test-Port -ComputerName 'server' -port 80
    Checks port 80 on server 'server' to see if it is listening
.EXAMPLE
    'server' | Test-Port -Port 80
    Checks port 80 on server 'server' to see if it is listening
.EXAMPLE
    Test-Port -ComputerName @("server1","server2") -Port 80
    Checks port 80 on server1 and server2 to see if it is listening
.EXAMPLE
    @("server1","server2") | Test-Port -Port 80
    Checks port 80 on server1 and server2 to see if it is listening
.EXAMPLE
    (Get-Content hosts.txt) | Test-Port -Port 80
    Checks port 80 on servers in host file to see if it is listening
.EXAMPLE
    Test-Port -ComputerName (Get-Content hosts.txt) -Port 80
    Checks port 80 on servers in host file to see if it is listening
.EXAMPLE
    Test-Port -ComputerName (Get-Content hosts.txt) -Port @(1..59)
    Checks a range of ports from 1-59 on all servers in the hosts.txt file
.OUTPUTS
    [psobject]
    An array of objects containing the fields:
    ComputerName    A string containing the computer name or ip address that was passed to the function
    Protocol        A string being either 'TCP' or 'UDP'
    Port            An integer in the range 1 - 65535
    Open            A boolean
    Notes           Any notes when attempting to make a connection
.LINK
    about_Properties
#>

    #region Parameter
    [cmdletbinding(
        DefaultParameterSetName = '',
        ConfirmImpact = 'low'
    )]
    [OutputType([psobject])]
    Param(
        [Parameter(
            Mandatory = $True,
            HelpMessage = 'Enter a ComputerName or IP address',
            Position = 0,
            ParameterSetName = '',
            ValueFromPipeline = $True)
            ]
            [string[]] $ComputerName,
        [Parameter(
            Position = 1,
            Mandatory = $True,
            HelpMessage = 'Enter an integer port number (1-65535)',
            ParameterSetName = '')]
            [uint16[]] $Port,
        [Parameter(
            ParameterSetName = '')]
            [int] $TCPtimeout=1000,
        [Parameter(
            ParameterSetName = '')]
            [int] $UDPtimeout=1000,
        [Parameter(
            ParameterSetName = '')]
            [switch] $TCP,
        [Parameter(
            ParameterSetName = '')]
            [switch] $UDP
        )
    #endregion Parameter
    Begin
    {
        If (!$tcp -AND !$udp)
        {
            $tcp = $True
        }
        #Typically you never do this, but in this case I felt it was for the benefit of the function
        #as any errors will be noted in the output of the report
        $oldEA = $ErrorActionPreference
        $ErrorActionPreference = 'SilentlyContinue'
        write-verbose -Message "Saving current value of `$ErrorActionPreference [$($oldEa)] and setting it to 'Stop'"
        $report = @()
    }
    Process
    {
        ForEach ($c in $ComputerName)
        {
            ForEach ($p in $port)
            {

            }
        }
    } End
    {
        #Generate Report
        write-output -InputObject $report
        write-verbose -Message "Resetting value of `$ErrorActionPreference back to [$($oldEa)]"
        $ErrorActionPreference = $oldEA
    }
} #EndFunction Test-Port

#region Metadata
    # These variables are used to set the Description property of the function.
    # and whether they are meant to be exported
    Remove-Variable -Name FuncName        -ErrorAction SilentlyContinue
    Remove-Variable -Name FuncAlias       -ErrorAction SilentlyContinue
    Remove-Variable -Name FuncDescription -ErrorAction SilentlyContinue
    Remove-Variable -Name FuncVarName     -ErrorAction SilentlyContinue
    $FuncName        = 'Test-Port'
    $FuncAlias       = ''
    $FuncDescription = 'Tests a Port or a range of ports on a specific ComputerName'
    $FuncVarName     = ''
    if (-not (test-path -Path Variable:AliasesToExport))
    {
        $AliasesToExport = @()
    }
    if (-not (test-path -Path Variable:VariablesToExport))
    {
        $VariablesToExport = @()
    }
    if ($FuncAlias)
    {
        set-alias -Name $FuncAlias -Value $FuncName
        $AliasesToExport += $FuncAlias
    }
    if ($FuncVarName)
    {
        $VariablesToExport += $FuncVarName
    }
    # Setting the Description property of the function.
    (get-childitem -Path Function:$FuncName).set_Description($FuncDescription)
#endregion Metadata
