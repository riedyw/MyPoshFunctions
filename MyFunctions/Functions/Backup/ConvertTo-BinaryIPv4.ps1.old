Function ConvertTo-BinaryIPv4 {
<#
.SYNOPSIS
    Converts a Decimal IP address into a binary format.
.DESCRIPTION
    ConvertTo-BinaryIP uses System.Convert to switch between decimal and binary format. The output from this function is dotted binary.
.PARAMETER IPAddress
    An IP Address to convert.
#>
    [CmdLetBinding()]
    param(
        [Parameter(Mandatory = $true, Position = 0, ValueFromPipeline = $true)]
        [Net.IPAddress]$IPAddress
    )
    process {
        write-output [String]::Join('.', $( $IPAddress.GetAddressBytes() |
          ForEach-Object { [Convert]::ToString($_, 2).PadLeft(8, '0') } ))
      }
} #EndFunction ConvertTo-BinaryIPv4

if (-not (test-path Variable:AliasesToExport)) {
    $AliasesToExport = @()
}
if (-not (test-path Variable:VariablesToExport)) {
    $VariablesToExport = @()
}

set-alias -Name 'ConvertTo-BinaryIp' -Value 'ConvertTo-BinaryIpV4'
$AliasesToExport += 'ConvertTo-BinaryIp'
#$VariablesToExport += 'VariableName'


# These variables are used to set the Description property of the function.
$funcName = 'ConvertTo-BinaryIPv4'
$funcDescription = 'Converts a Decimal IP address into a binary format.'

# Setting the Description property of the function.
(get-childitem function:$funcName).set_Description($funcDescription)
