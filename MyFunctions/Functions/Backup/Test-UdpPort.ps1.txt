Function Test-UdpPort {
    Param([string]$ComputerName="$env:computername", [int] $port = 5985, [int] $timeout = 1000)
    try
    {
        $udpclient = New-Object -TypeName system.Net.Sockets.UdpClient($port)
        $udpclient.Connect($ComputerName,$port)
        $a = new-object system.text.asciiencoding
        $byte = $a.getbytes("$(get-date)")
        [void] $udpclient.Send($byte,$byte.length)

        #IPEndPoint object will allow us to read datagrams sent from any source.
        $remoteendpoint = New-Object system.net.ipendpoint([system.net.ipaddress]::Any,0)

        #Blocks until a message returns on this socket from a remote host.
        $receivebytes = $udpclient.Receive([ref]$remoteendpoint)

        #Convert returned data into string format
        [string]$returndata = $a.GetString($receivebytes)

#Uses the IPEndPoint object to show that the host responded.
Write-Host "This is the message you received: $($returndata.ToString())"
Write-Host "This message was sent from: $($remoteendpoint.address.ToString()) on their port number: $($remoteendpoint.Port.ToString())"


        $iar = $udpclient.BeginConnect($ComputerName,$port,$null,$null)
        $wait = $iar.AsyncWaitHandle.WaitOne($timeout,$false)
        if(!$wait)
        {
            $udpclient.Close()
            write-output $false
        }
        else
        {
            # Close the connection and report the error if there is one
            $null = $udpclient.EndConnect($iar)
            $udpclient.Close()
            write-output $true
        }
    }
    catch
    {
        $false
    }
} #EndFunction Test-UdpPort

if (-not (test-path Variable:AliasesToExport)) {
    $AliasesToExport = @()
}
if (-not (test-path Variable:VariablesToExport)) {
    $VariablesToExport = @()
}
#$AliasesToExport += 'AliasName'
#$VariablesToExport += 'VariableName'

