Function Parse-ComputerName {
<#
.SYNOPSIS
    To parse from a given computername and split it into the pieces that make it up
.DESCRIPTION
    To parse from a given computername the pieces that make it up into the properties ComputerName, Valid, Platform, Location, PIT, HostName
.PARAMETER ComputerName
    A string or an array of strings which specify the ComputerName(s) for which you want the names parsed.
.PARAMETER Case
    An optional parameter. 'Upper' will convert calculated fields to uppercase. 'Lower' will convert calculated fields to lowercase. The original specified computername is not altered.
.NOTES
    Author:     Bill Riedy
    Version:    2.0
    Date:       2018/07/06
    Comment:    Added field for complete computername after it has been parsed
    Version:    1.1
    Date:       2018/04/30
    Comment:    Changed regular expression to address entry of hostname beginning with mix of LCS and IIT nomenclature (e.g. 'LCS2A' or 'ITT214')
    To Do:
.EXAMPLE
    Parse-ComputerName -ComputerName 'LCS10CINDC01'

    Would return
    ComputerName Valid Platform Location PIT HostName
    ------------ ----- -------- -------- --- --------
    LCS10CINDC01  True LCS      10       CIN DC01
.EXAMPLE
    Parse-ComputerName -ComputerName 'badname'

    Would return
    ComputerName Valid Platform Location PIT HostName
    ------------ ----- -------- -------- --- --------
    badname      False                       badname
.EXAMPLE
    Parse-ComputerName -ComputerName 'LCS10CINDC01' -Case Lower

    Would return
    ComputerName Valid Platform Location PIT HostName
    ------------ ----- -------- -------- --- --------
    LCS10CINDC01  True lcs      10       cin dc01
.EXAMPLE
    "lcs2cindc01","itt2auinhvm01","badname" | Parse-ComputerName  -case upper

    Would return
    ComputerName  Valid Platform Location PIT HostName
    ------------  ----- -------- -------- --- --------
    lcs2cindc01    True LCS      2        CIN DC01
    itt2auinhvm01  True ITT2     A        UIN HVM01
    badname       False                       BADNAME
.EXAMPLE
    Parse-ComputerName -Computername 'LCS18cindc01' -case Upper -verbose

    Would return
    VERBOSE: $ValidPlatform=[((LCS\d\d)|(LCS\d)|(ITT2[A|B|C]))]
    VERBOSE: $ValidPlatformName=[(LCS|ITT2)]
    VERBOSE: $ValidPlatformNumber=[(\d\d|\d|A|B|C)]
    VERBOSE: $ValidPit=[(CIN|UIN|CWS|HME|CNS|CCS)]
    VERBOSE: Computers specified are [LCS18cindc01]
    VERBOSE: $curComputerName=[LCS18cindc01]
    VERBOSE: $FullRegEx=[^(LCS|ITT2)(\d\d|\d|A|B|C)(CIN|UIN|CWS|HME|CNS|CCS)\w+$]
    VERBOSE: $HullName=[LCS]
    VERBOSE: $PlatformNumber=[18]
    VERBOSE: $PIT=[cin]
    VERBOSE: $HostName=[dc01]
    VERBOSE: Converting fields to uppercase

    ComputerName Valid Platform Location PIT HostName
    ------------ ----- -------- -------- --- --------
    LCS18cindc01  True LCS      18       CIN DC01
.OUTPUTS
    [psobject]
    A custom object containing the following properties:
    ComputerName - The name of the computer as originally specified
    Valid        - A boolean indicating if it is a valid computername given this script
    Platform     - A string being 'LCS', or 'ITT2', or blank if computername is invalid
    Location     - A string of numbers if PlatformName = 'LCS', or 'A','B','C' if PlatformName = 'ITT2', or blank if computername invalid
    PIT          - A string from the set (CIN, UIN, CWS, HME, CNS, CCS) or '' if undetermined
    HostName     - The remaining portion of the string after $PlatformName $PlatformNumber, $PIT
#>
  #region Parameter
    [cmdletbinding()]
    [OutputType([psobject])]
    Param(
        [Parameter(
            Mandatory = $True,
            Position = 0,
            ParameterSetName = '',
            ValueFromPipeline = $True)]
            [string[]] $ComputerName,
        [Parameter(
            Position = 1,
            ParameterSetName = '')]
            [ValidateSet('Upper','Lower')]
            [string] $Case
    )
  #endregion Parameter
  begin {
    $ValidPlatform       = '((LCS\d\d)|(LCS\d)|(ITT2[A|B|C]))'
    $ValidPlatformName   = '(LCS|ITT2)'
    # Need to search for 2 digits first as regex will exit on first match
    $ValidPlatformNumber = '(\d\d|\d|A|B|C)'
    $ValidPit            = '(CIN|UIN|CWS|HME|CNS|CCS)'
    write-verbose -Message "`$ValidPlatform=[$($ValidPlatform)]"
    write-verbose -Message "`$ValidPlatformName=[$($ValidPlatformName)]"
    write-verbose -Message "`$ValidPlatformNumber=[$($ValidPlatformNumber)]"
    write-verbose -Message "`$ValidPit=[$($ValidPit)]"
  }
  process {
    write-verbose -Message "Computers specified are [$($computerName -join ', ')]"
    foreach ($curComputerName in $ComputerName) {
        write-verbose -Message "`$curComputerName=[$($curComputerName)]"
        $FullRegEx = '^' + $ValidPlatform + $ValidPit + '\w+$'
        write-verbose -Message "`$FullRegEx=[$($FullRegEx)]"
        if ($curComputerName -match $FullRegEx) {
            $curRegEx = '^'+$ValidPlatformName
            $curComputerName -match $curRegEx | out-null
            $HullName = $matches[0]
            write-verbose -Message "`$HullName=[$($HullName)]"
            $curComputerName -match ('^'+$ValidPlatformName + $ValidPlatformNumber) | out-null
            $tempString = $matches[0]
            $PlatformNumber = $tempstring.substring($HullName.length)
            write-verbose -Message "`$PlatformNumber=[$($PlatformNumber)]"
            $curComputerName -match ('^' + $ValidPlatformName + $ValidPlatformNumber + $ValidPit) | out-null
            $tempString = $matches[0]
            $PIT = $tempstring.substring(($HullName+$platformNumber).length)
            write-verbose -Message "`$PIT=[$($PIT)]"
            $HostName = $curComputerName.substring(($HullName+$platformNumber+$pit).length)
            write-verbose -Message "`$HostName=[$($HostName)]"
            switch ($case) {
                'Upper' {
                    write-verbose -Message 'Converting fields to uppercase'
                    $Prop = @{
                        ComputerName = $curComputerName
                        Valid        = $true
                        Platform     = $HullName.ToUpper()
                        Location     = $PlatformNumber.ToUpper()
                        PIT          = $PIT.ToUpper()
                        HostName     = $HostName.ToUpper()
                        ParsedCN       = $curComputerName.ToUpper()
                    }
                }
                'Lower' {
                    write-verbose -Message 'Converting fields to lowercase'
                    $Prop = @{
                        ComputerName = $curComputerName
                        Valid        = $true
                        Platform     = $HullName.ToLower()
                        Location     = $PlatformNumber.ToLower()
                        PIT          = $PIT.ToLower()
                        HostName     = $HostName.ToLower()
                        ParsedCN       = $curComputerName.ToLower()
                    }
                }
                default {
                    $Prop = @{
                        ComputerName = $curComputerName
                        Valid        = $true
                        Platform     = $HullName
                        Location     = $PlatformNumber
                        PIT          = $PIT
                        HostName     = $HostName
                        ParsedCN       = $curComputerName
                    }
                }
            } # endSwitch
            $obj = new-object -TypeName psobject -property $prop
            # By default no control over order of field names so fixing with select-object
            $obj | Select-Object -Property ComputerName, Valid, Platform, Location, PIT, HostName, ParsedCN
        } else {
            switch ($case) {
                'Upper' {
                    write-verbose -Message 'Converting fields to uppercase'
                    $Prop = @{
                        ComputerName = $curComputerName
                        Valid        = $false
                        Platform     = ''
                        Location     = ''
                        PIT          = ''
                        HostName     = $curComputerName.ToUpper()
                        ParsedCN       = ''
                    }
                }
                'Lower' {
                    write-verbose -Message 'Converting fields to lowercase'
                    $Prop = @{
                        ComputerName = $curComputerName
                        Valid        = $false
                        Platform     = ''
                        Location     = ''
                        PIT          = ''
                        HostName     = $curComputerName.ToLower()
                        ParsedCN       = ''
                    }
                }
                default {
                    $Prop = @{
                        ComputerName = $curComputerName
                        Valid        = $false
                        Platform     = ''
                        Location     = ''
                        PIT          = ''
                        HostName     = $curComputerName
                        ParsedCN       = ''
                    }
                }
            } # endSwitch
            $obj = new-object -TypeName psobject -property $prop
            $obj | Select-Object -Property ComputerName, Valid, Platform, Location, PIT, HostName, ParsedCN
        } # endElse
    } # endForEach ($curComputerName in $ComputerName)
  } # endProcess
  end {
    # No code needed here
  }

} # EndFunction Parse-ComputerName

#region Metadata
    # These variables are used to set the Description property of the function.
    # and whether they are meant to be exported
    Remove-Variable -Name FuncName        -ErrorAction SilentlyContinue
    Remove-Variable -Name FuncAlias       -ErrorAction SilentlyContinue
    Remove-Variable -Name FuncDescription -ErrorAction SilentlyContinue
    Remove-Variable -Name FuncVarName     -ErrorAction SilentlyContinue
    $FuncName        = 'Parse-ComputerName'
    $FuncAlias       = ''
    $FuncDescription = 'Splits a computername based upon rules and tokenizes it'
    $FuncVarName     = ''
    if (-not (test-path -Path Variable:AliasesToExport))
    {
        $AliasesToExport = @()
    }
    if (-not (test-path -Path Variable:VariablesToExport))
    {
        $VariablesToExport = @()
    }
    if ($FuncAlias)
    {
        set-alias -Name $FuncAlias -Value $FuncName
        $AliasesToExport += $FuncAlias
    }
    if ($FuncVarName)
    {
        $VariablesToExport += $FuncVarName
    }
    # Setting the Description property of the function.
    (get-childitem -Path Function:$FuncName).set_Description($FuncDescription)
#endregion Metadata
